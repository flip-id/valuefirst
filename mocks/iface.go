// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	manager "github.com/flip-id/valuefirst/manager"
	gomock "github.com/golang/mock/gomock"
)

// MockTokenClient is a mock of TokenClient interface.
type MockTokenClient struct {
	ctrl     *gomock.Controller
	recorder *MockTokenClientMockRecorder
}

// MockTokenClientMockRecorder is the mock recorder for MockTokenClient.
type MockTokenClientMockRecorder struct {
	mock *MockTokenClient
}

// NewMockTokenClient creates a new mock instance.
func NewMockTokenClient(ctrl *gomock.Controller) *MockTokenClient {
	mock := &MockTokenClient{ctrl: ctrl}
	mock.recorder = &MockTokenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenClient) EXPECT() *MockTokenClientMockRecorder {
	return m.recorder
}

// DeleteToken mocks base method.
func (m *MockTokenClient) DeleteToken(ctx context.Context, token string) (manager.ResponseEnableToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, token)
	ret0, _ := ret[0].(manager.ResponseEnableToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockTokenClientMockRecorder) DeleteToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockTokenClient)(nil).DeleteToken), ctx, token)
}

// DisableToken mocks base method.
func (m *MockTokenClient) DisableToken(ctx context.Context, token string) (manager.ResponseEnableToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableToken", ctx, token)
	ret0, _ := ret[0].(manager.ResponseEnableToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableToken indicates an expected call of DisableToken.
func (mr *MockTokenClientMockRecorder) DisableToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableToken", reflect.TypeOf((*MockTokenClient)(nil).DisableToken), ctx, token)
}

// EnableToken mocks base method.
func (m *MockTokenClient) EnableToken(ctx context.Context, token string) (manager.ResponseEnableToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableToken", ctx, token)
	ret0, _ := ret[0].(manager.ResponseEnableToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableToken indicates an expected call of EnableToken.
func (mr *MockTokenClientMockRecorder) EnableToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableToken", reflect.TypeOf((*MockTokenClient)(nil).EnableToken), ctx, token)
}

// GenerateToken mocks base method.
func (m *MockTokenClient) GenerateToken(ctx context.Context) (manager.ResponseGenerateToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx)
	ret0, _ := ret[0].(manager.ResponseGenerateToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenClientMockRecorder) GenerateToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenClient)(nil).GenerateToken), ctx)
}
